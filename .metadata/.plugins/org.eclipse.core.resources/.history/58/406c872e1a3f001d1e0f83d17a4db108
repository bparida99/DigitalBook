package com.cts.reader.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@EnableWebSecurity
public class CostumizeSecurity extends WebSecurityConfigurerAdapter{
	
	@Autowired
	private ReaderDetailsService reader;
	
	@Override
	public void configure(WebSecurity web) throws Exception {
	    web.ignoring().antMatchers("/api/v1/digitalbooks/readers/addReader");

	}

	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
	// We don't need CSRF for this example
	httpSecurity.csrf().disable()
	// dont authenticate this particular request
	.authorizeRequests().antMatchers("/authenticate", "/greet").permitAll()
	// all other requests need to be authenticated
	.anyRequest().authenticated()
	.and()
	// make sure we use stateless session; session won't be 
	// used to store user's state.
	.exceptionHandling()
	.authenticationEntryPoint(jwtAuthenticationEntryPoint)
	.and()
	.sessionManagement()
	.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	// Add a filter to validate the tokens with every request
	httpSecurity.addFilterBefore(
	jwtRequestFilter, 
	UsernamePasswordAuthenticationFilter.class
	);
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception{
		//auth.inMemoryAuthentication().withUser("Biswojit").password("abcd").roles("ADMIN");
		auth.userDetailsService(reader);
		
	}
	
	@Bean
	public PasswordEncoder getpassPasswordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}

}
